// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String
  password    String?
  image       String?
  firstname   String?
  surname     String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  verified    Boolean   @default(false)
  last_login  DateTime?
  count_login Int       @default(0)
  is_provider Boolean   @default(false)
  provider    String?
  projects    Project[]
}

model Project {
  id                   Int          @id @default(autoincrement())
  google_client_id     String?
  google_secret_id     String?
  facebook_client_id   String?
  facebook_secret_id   String?
  twitch_client_id     String?
  twitch_secret_id     String?
  github_client_id     String?
  github_secret_id     String?
  is_google_active     Boolean      @default(false)
  is_facebook_active   Boolean      @default(false)
  is_twitch_active     Boolean      @default(false)
  is_password_active   Boolean      @default(false)
  is_magic_link_active Boolean      @default(false)
  tenant_code          String       @default(uuid())
  redirect_url         String?
  name                 String
  description          String?
  user                 User         @relation(fields: [user_id], references: [id])
  user_id              Int
  people               People[]
  Role                 Role[]
  Permission           Permission[]
  MagicToken           MagicToken[]
}

model People {
  id          Int       @id @default(autoincrement())
  email       String
  firstname   String?
  surname     String?
  password    String?
  meta_data   Json?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  verified    Boolean   @default(false)
  last_login  DateTime?
  count_login Int       @default(0)
  is_provider Boolean   @default(false)
  provider    String?
  project     Project   @relation(fields: [project_id], references: [id])
  project_id  Int
  role        Role      @relation(fields: [role_id], references: [id])
  role_id     Int
  image       String?
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  project     Project      @relation(fields: [project_id], references: [id])
  project_id  Int
  is_default  Boolean      @default(false)
  permissions Permission[]
  People      People[]
}

model Permission {
  id         Int     @id @default(autoincrement())
  name       String
  role       Role?   @relation(fields: [role_id], references: [id])
  role_id    Int?
  project    Project @relation(fields: [project_id], references: [id])
  project_id Int
}

model MagicToken {
  id         Int      @id @default(autoincrement())
  token      String
  expired_at DateTime
  email      String
  project    Project? @relation(fields: [project_id], references: [id])
  project_id Int?
  for_user   Boolean
  for_people Boolean
}
